name: Deploy to EC2 with Docker Image

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout del código fuente
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Obtener la versión más alta desde Docker Hub
    - name: Get the highest version from DockerHub
      id: get_version
      run: |
        # Consultar los tags existentes de la imagen en Docker Hub
        response=$(curl -s https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/rick-morty-app-php/tags/)
          
        # Filtrar los tags que siguen el formato v<major>.<minor> y extraer solo los números
        tags=$(echo $response | jq -r '.results[] | select(.name | test("^v[0-9]+\\.[0-9]+$")) | .name' | sed 's/^v//')

        # Si no hay tags, empezar desde v1.0
        if [ -z "$tags" ]; then
          NEW_VERSION="v1.0"
        else
          # Obtener el tag más alto y extraer la parte mayor y menor
          highest_version=$(echo "$tags" | sort -V | tail -n 1)
          MAJOR=$(echo $highest_version | cut -d. -f1)
          MINOR=$(echo $highest_version | cut -d. -f2) 
          # Incrementar la versión menor
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="v${MAJOR}.${NEW_MINOR}"
        fi
          # Salida de la versión a usar
          echo "next=$NEW_VERSION" >> $GITHUB_OUTPUT

    # 3. Log in a DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 4. Construir y subir la imagen Docker a DockerHub
    - name: Build and push Docker image
      run: |
        docker build . --file Dockerfile \
          --tag ${{ secrets.DOCKER_USERNAME }}/rick-morty-app:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/rick-morty-app:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    # 1. Conectar a EC2 y desplegar la aplicación
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu  # o ec2-user, según cuál funcione en tu prueba SSH
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          sudo yum update -y
          sudo yum install -y docker
          sudo service docker start
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/rick-morty-app:latest
          sudo docker ps -q --filter "name=rick-morty-app-php" | grep -q . && \
          sudo docker stop rick-morty-app-php && \
          sudo docker rm rick-morty-app-php || true
          sudo docker run -d --name rick-morty-app-php -p 80:80 ${{ secrets.DOCKER_USERNAME }}/rick-morty-app:latest